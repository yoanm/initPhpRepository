# Contributing

## Getting Started
 * Fork, then clone the repo:
```bash
git clone git@github.com:your-username/{{ github.id }}.git
````

 * Make sure everything goes well:
```bash
composer ci
```

 * Make your changes (Add/Update tests according to your changes).
 * Make sure tests are still green:
```bash
composer ci
```

 * To check code coverage, launch
```bash
composer coverage
```

 * Push to your fork and [submit a pull request]({{ github.url }}/compare/).
 * Wait for feedback or merge.

  Some stuff that will increase your pull request's acceptance:
    * Write tests.
    * Follow PSR-2 coding style.
    * Write good commit messages.

## Tests
### Technical tests
**Contributor/code point of view**

Test scope is a public php `class` method

 * **Unit level** (PhpUnit)

*Directory : `{{ autoload.folders.test.technical.unit }}/`*

*Base namespace : `{{ autoload.namespace.tests.technical.unit }}`*

**Any `object` used in the tested class (aka dependency, could be contructor argument or an instanciation inside the class) must be mocked** using **Prophecy**, if "not possible", the test must be moved under Integration level. 

*Most of tests should be done at Unit level as it's the faster one (execution time point of view), so issues are found earlier.*

 * **Integration level** (PhpUnit)

*Directory : `{{ autoload.folders.test.technical.integration }}/`*

*Base namespace : `{{ autoload.namespace.tests.technical.integration }}`*

*Launched after Unit level tests*

Dependencies *could* be mocked but it's not mandatory.

Put here all tests that test :

 * the behavior of class with an another one
 * a class that use a final class as dependency
 * a method that internally instanciate other class
 * ...
 * a method that have dependencies not mocked for any other reasons

### Functional tests
**End-user point of view**

Test scope is the "public API" of this repository (testing api payloads or website generated html pages for instance).

 * With **Phpunit**

*Directory : `{{ autoload.folders.test.functional.behat_context }}/`*

*Base namespace : `{{ autoload.namespace.tests.functional.base }}`*

*Launched after Technical Integration tests*

Test could use a slice of repository source code (to ensure a functionality for instance but without taking in account a "upper level" of code)

 * With **Behat**

*Behat context directory : `{{ autoload.folders.test.functional.behat_context }}`*

*Behat context base namespace : `{{ autoload.namespace.tests.functional.behat_context }}/`*

*Behat features directory : `{{ autoload.folders.test.behat }}/`*

*Launched after Phpunit Functional tests*

Tests will use the complete repository source code and will perform tests to cover production end-user actions

### Example
Let's say we have a class called `ExampleHelper`,
with the following namespace `{{ autoload.namespace.base }}\Helper\ExampleHelper`
and class source file located at `{{ autoload.folders.source_psr0 }}/Helper/ExampleHelper.php`

A test for ExampleHelper class must have one of the following path and namespace:

 * Technical Unit test
    * namespace `{{ autoload.namespace.tests.technical.unit }}\Helper`
    * path `{{ autoload.folders.test.technical.unit }}/Helper/ExampleHelperTest.php`
 * Technical Integration test
    * namespace `{{ autoload.namespace.tests.technical.integration }}\Helper`
    * path `{{ autoload.folders.test.technical.integration }}/Helper/ExampleHelperTest.php`
 * Functional test - Phpunit only
    * namespace `{{ autoload.namespace.tests.functional.base }}`
    * path `{{ autoload.folders.test.functional.phpunit }}/Helper/ExampleHelperTest.php` or `{{ autoload.folders.test.functional.phpunit }}/*FunctionalityName*Test.php`


A Behat context must have the following namespace and path:

Path `{{ autoload.folders.test.functional.behat_context }}/MyContext.php`

Namespace `{{ autoload.namespace.tests.functional.base }}\BehatContext`
